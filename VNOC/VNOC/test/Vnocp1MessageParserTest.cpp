#include <cppunit/TestFixture.h>
#include <cppunit/extensions/HelperMacros.h>
#include "../PackMessage.h"
#include <string.h>
class Vnocp1MessageParserTest : public CppUnit::TestFixture
{
    CPPUNIT_TEST_SUITE( Vnocp1MessageParserTest );
    CPPUNIT_TEST( MSGParseTest );
    CPPUNIT_TEST_SUITE_END();
public:
    void setUp()
    {
        
    }
    void tearDown()
    {

    }
public:
    void MSGParseTest()
    {

		byte testRVC [] = {0x55,
			0x00,0x00,0x00,0x1E,
			0x01,
			0x01,
			0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,
			0x15,
			0x00,0x00,0x00,0x00,
			0x01,

			0x00,0x00,0x00,0x10,

			0x33,0x33,0x33,0x33,
			0x33,0x33,0x33,0x33,
			0x33,0x33,0x33,0x33,
			0x33,0x33,0x33,0x33,

			0x00,0x05,
			0x43};


        byte testAVC [] = {0x55,
		0x00,0x00,0x00,0x1E,
		0x01,
		0x01,
		0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,
		0x15,
		0x00,0x00,0x00,0x00,
		0x03,
		0x00,0x00,0x00,0x01,
		0x00,0x00,0x00,0x01,
		0x00,0x00,0x00,0x10,

		0x01,

		0x01,

 		0x33,0x33,0x33,0x33,
 		0x33,0x33,0x33,0x33,
		0x33,0x33,0x33,0x33,
		0x33,0x33,0x33,0x33,

		0x00,0x05,
		0x43};


		byte testRLI [] = {0x55,
			0x00,0x00,0x00,0x1E,
			0x01,
			0x01,
			0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,
			0x15,
			0x00,0x00,0x00,0x00,
			0x03,
			0x00,0x00,0x00,0x10,
			0x00,0x00,0x00,0x01,
			0x00,0x00,0x00,0x10,

			0x33,0x33,0x33,0x33,
			0x33,0x33,0x33,0x33,
			0x33,0x33,0x33,0x33,
			0x33,0x33,0x33,0x33,

			0x01,

			0x33,0x33,0x33,0x33,
			0x33,0x33,0x33,0x33,
			0x33,0x33,0x33,0x33,
			0x33,0x33,0x33,0x33,

			0x00,0x05,
			0x43};

		byte testALI [] = {0x55,
			0x00,0x00,0x00,0x1E,
			0x01,
			0x01,
			0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,
			0x15,
			0x00,0x00,0x00,0x00,
			0x03,

			0x00,0x00,0x00,0x01,
			0x00,0x00,0x00,0x10,
			0x00,0x00,0x00,0x10,

			0x01,

			0x33,0x33,0x33,0x33,
			0x33,0x33,0x33,0x33,
			0x33,0x33,0x33,0x33,
			0x33,0x33,0x33,0x33,

			0x33,0x33,0x33,0x33,
			0x33,0x33,0x33,0x33,
			0x33,0x33,0x33,0x33,
			0x33,0x33,0x33,0x33,

			0x00,0x05,
			0x43};

		byte testRPS [] = {0x55,
			0x00,0x00,0x00,0x1E,
			0x01,
			0x01,
			0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,
			0x15,
			0x00,0x00,0x00,0x00,

			0x05,

			0x00,0x00,0x00,0x01,
			0x00,0x00,0x00,0x10,
			0x00,0x00,0x00,0x10,
			0x00,0x00,0x00,0x01,
			0x00,0x00,0x00,0x10,

			0x01,

			0x33,0x33,0x33,0x33,
			0x33,0x33,0x33,0x33,
			0x33,0x33,0x33,0x33,
			0x33,0x33,0x33,0x33,

			0x01,

			0x33,0x33,0x33,0x33,
			0x33,0x33,0x33,0x33,
			0x33,0x33,0x33,0x33,
			0x33,0x33,0x33,0x33,

			0x00,0x05,
			0x43};


		byte testAPS [] = {0x55,
			0x00,0x00,0x00,0x1E,
			0x01,
			0x01,
			0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,
			0x15,
			0x00,0x00,0x00,0x00,
			0x01,

			0x00,0x00,0x00,0x10,

			0x33,0x33,0x33,0x33,
			0x33,0x33,0x33,0x33,
			0x33,0x33,0x33,0x33,
			0x33,0x33,0x33,0x33,

			0x00,0x05,
			0x43};



		//AVC
		CMessageParser msgParser;
		CMessage* msgAVC = msgParser.Parse(testAVC,62);
		CPPUNIT_ASSERT(msgAVC->GetMessageType() == MSG_AVC_TYPE);//验证消息类型是AVC
		MSG_AVC* msg_avc = (MSG_AVC *)msgAVC;

		//RVC
		CMessage* msgRVC = msgParser.Parse(testRVC,52);
		CPPUNIT_ASSERT(msgRVC->GetMessageType() == MSG_AVC_TYPE);//验证消息类型是RVC
		MSG_RVC* msg_rvc = (MSG_RVC *)msgRVC;

		//RLI
		CMessage* msgRLI = msgParser.Parse(testRLI,77);
		CPPUNIT_ASSERT(msgRLI->GetMessageType() == MSG_AVC_TYPE);//验证消息类型是RLI
		MSG_RLI* msg_rli = (MSG_RLI *)msgRLI;

		//ALI
		CMessage* msgALI = msgParser.Parse(testALI,77);
		CPPUNIT_ASSERT(msgALI->GetMessageType() == MSG_AVC_TYPE);//验证消息类型是ALI
		MSG_ALI* msg_ali = (MSG_ALI *)msgALI;

		//RPS
		CMessage* msgRPS = msgParser.Parse(testRPS,86);
		CPPUNIT_ASSERT(msgRPS->GetMessageType() == MSG_AVC_TYPE);//验证消息类型是RPS
		MSG_RPS* msg_rps = (MSG_RPS *)msgRPS;
		
		//APS
		CMessage* msgAPS = msgParser.Parse(testAPS,52);
		CPPUNIT_ASSERT(msgAPS->GetMessageType() == MSG_AVC_TYPE);//验证消息类型是RPS
		MSG_APS* msg_aps = (MSG_APS *)msgAPS;

		// 		//验证令牌
		// 		byte expectToken[]={0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66};
		// 		CPPUNIT_ASSERT(memcmp(msg_avc->GetGUID(),expectToken, sizeof(expectToken)) == 0);
		// 		//验证验证码类型
		// 		CPPUNIT_ASSERT(msg_avc->GetCaptchaType() == 0x01);
		// 		//验证验证码内容
		// 		byte CaptchaContent[]={0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33};
		// 		CPPUNIT_ASSERT(memcmp(msg_avc->GetCaptcha(),CaptchaContent, sizeof(CaptchaContent)) == 0);

		CPPUNIT_ASSERT(true);
    }


};
CPPUNIT_TEST_SUITE_REGISTRATION ( Vnocp1MessageParserTest );
CPPUNIT_TEST_SUITE_NAMED_REGISTRATION(Vnocp1MessageParserTest, "Vnocp1MessageParserTest");